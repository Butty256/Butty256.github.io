---
import AdjustText from "./AdjustText.astro";
import FormattedDate from "./FormattedDate.astro";
import { type PostSummary } from "../models/postSummary";
import { TAG_PREFIX } from "../consts";

type Props = {
	post: PostSummary | string;
};

const slugToPost: (slug: string) => Promise<PostSummary> = async (
	slug: string,
) => {
	// Using glob to reference files in mdx
	const posts: Record<string, any>[] = Object.values(
		import.meta.glob("../content/posts/**/*.md*", { eager: true }),
	);
	const frontmatter = posts.find((p) => {
		return (
			p.file.includes(`/posts/${slug}.md`) ||
			p.file.includes(`/posts/${slug}/index.md`)
		);
	})!!.frontmatter;
	return {
		slug: slug,
		title: frontmatter.title,
		description: frontmatter.description,
		publishedDate: new Date(frontmatter.publishedDate),
		tags: frontmatter.tags,
	};
};

const { post: _post } = Astro.props;
let post = typeof _post === "string" ? await slugToPost(_post) : _post;
---

<>
	<div class="title">
		<a href={`/posts/${post.slug}`}>
			<AdjustText text={post.title} />
		</a>
	</div>
	<div class="description">
		<AdjustText text={post.description} />
	</div>
	<ul class="supplement">
		<li class="date">
			<FormattedDate date={post.publishedDate} />
		</li>
		{
			post.tags &&
				post.tags.map((tag) => (
					<li class="tag">
						<a href={`/tags/${tag.id}`}>
							<AdjustText text={`${TAG_PREFIX}${tag.name}`} />
						</a>
					</li>
				))
		}
	</ul>
</>

<style lang="scss">
	.title {
		font: typography.$font-title-large;
	}

	.description {
		font: typography.$font-body-small;
		color: colors.$color-on-background-variant;
		margin-top: 4px;
	}

	.supplement {
		margin: 0 -8px 0 0;
		padding: 0;
		list-style: none;
		display: flex;
		flex-wrap: wrap;

		.date {
			font: typography.$font-label-medium;
			margin-right: 12px;
			color: colors.$color-on-background-variant;
		}

		.tag {
			font: typography.$font-label-medium;
			margin-right: 8px;
			color: colors.$color-on-background-variant;

			a {
				@media (hover: hover) {
					&:hover {
						color: colors.$color-link-hover;
						text-decoration: none;
						outline: 1px dashed colors.$color-link-hover;
						border-radius: 2px;
					}
				}

				&:active {
					color: colors.$color-link-active;
					text-decoration: none;
					outline: 1px solid colors.$color-link-active;
					border-radius: 2px;
				}
			}
		}
	}
</style>
